# ml_pipelines_mlflow.py
import numpy as np
import mlflow
import mlflow.sklearn
import mlflow.xgboost

from sklearn.datasets import load_diabetes, load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt


# Set experiment name (all runs will be grouped here)
EXPERIMENT_NAME = "ML_Pipelines_Experiment"
mlflow.set_experiment(EXPERIMENT_NAME)


def regression_pipelines():
    """Train and log Linear Regression, Random Forest, and XGBoost with MLflow."""
    # Load regression dataset
    X, y = load_diabetes(return_X_y=True)
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    # Define pipelines
    pipelines = {
        "Linear Regression": Pipeline([
            ("scaler", StandardScaler()),
            ("model", LinearRegression())
        ]),
        "Random Forest": Pipeline([
            ("scaler", StandardScaler()),
            ("model", RandomForestRegressor(n_estimators=100, random_state=42))
        ]),
        "XGBoost": Pipeline([
            ("scaler", StandardScaler()),
            ("model", XGBRegressor(n_estimators=100, random_state=42, verbosity=0))
        ])
    }

    for name, pipe in pipelines.items():
        with mlflow.start_run(run_name=name, nested=True):
            # Fit model
            pipe.fit(X_train, y_train)
            preds = pipe.predict(X_test)

            # Metrics
            mse = mean_squared_error(y_test, preds)
            r2 = r2_score(y_test, preds)

            # Log metrics
            mlflow.log_metric("MSE", mse)
            mlflow.log_metric("R2", r2)

            # Log parameters
            if hasattr(pipe.named_steps["model"], "get_params"):
                mlflow.log_params(pipe.named_steps["model"].get_params())

            # Log model
            if name == "XGBoost":
                mlflow.xgboost.log_model(pipe.named_steps["model"], artifact_path="model")
            else:
                mlflow.sklearn.log_model(pipe, artifact_path="model")

            print(f"\n{name} Results:")
            print(f"  MSE: {mse:.2f}")
            print(f"  R²: {r2:.2f}")


def clustering_pipeline():
    """Unsupervised K-Means clustering with MLflow logging."""
    data = load_iris()
    X = data.data

    pipeline = Pipeline([
        ("scaler", StandardScaler()),
        ("kmeans", KMeans(n_clusters=3, random_state=42, n_init=10))
    ])

    with mlflow.start_run(run_name="KMeans Clustering", nested=True):
        clusters = pipeline.fit_predict(X)

        # Log inertia (clustering loss)
        inertia = pipeline.named_steps["kmeans"].inertia_
        mlflow.log_metric("inertia", inertia)
        mlflow.log_param("n_clusters", 3)

        # Log model
        mlflow.sklearn.log_model(pipeline, artifact_path="kmeans_model")

        print("\nK-Means Results:")
        print(f"  Inertia: {inertia:.2f}")

        # Visualization
        pca = PCA(n_components=2)
        X_pca = pca.fit_transform(X)

        plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap="viridis", alpha=0.7)
        plt.title("K-Means Clustering (Iris Data, PCA-reduced)")
        plt.xlabel("PC1")
        plt.ylabel("PC2")
        plt.colorbar(label="Cluster")

        # Save plot and log to MLflow
        plt.savefig("kmeans_clusters.png")
        mlflow.log_artifact("kmeans_clusters.png")
        plt.close()


if __name__ == "__main__":
    # One parent run to group everything
    with mlflow.start_run(run_name="Full_Pipeline_Run"):
        print("Running regression pipelines with MLflow tracking...")
        regression_pipelines()

        print("\nRunning K-Means clustering pipeline with MLflow tracking...")
        clustering_pipeline()

    print("\n✅ All runs logged to MLflow experiment:", EXPERIMENT_NAME)
