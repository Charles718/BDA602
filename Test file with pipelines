# ml_pipelines_mlflow.py
import pandas as pd
import mlflow
import mlflow.sklearn
import mlflow.xgboost

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score


# Set experiment name (all runs will be grouped here)
EXPERIMENT_NAME = "ML_Pipelines_Experiment"
mlflow.set_experiment(EXPERIMENT_NAME)


def regression_pipelines(csv_path, target_col):
    """Train and log Linear Regression, Random Forest, and XGBoost with MLflow."""
    # Load your dataset
    df = pd.read_csv("Lyftdataset.csv")

    # Split features and target
    X = df.drop(columns=[target_col])
    y = df[target_col]

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    # Define pipelines
    pipelines = {
        "Linear Regression": Pipeline([
            ("scaler", StandardScaler()),
            ("model", LinearRegression())
        ]),
        "Random Forest": Pipeline([
            ("scaler", StandardScaler()),
            ("model", RandomForestRegressor(n_estimators=100, random_state=42))
        ]),
        "XGBoost": Pipeline([
            ("scaler", StandardScaler()),
            ("model", XGBRegressor(n_estimators=100, random_state=42, verbosity=0))
        ])
    }

    # Train and log each model
    for name, pipe in pipelines.items():
        with mlflow.start_run(run_name=name, nested=True):
            # Fit model
            pipe.fit(X_train, y_train)
            preds = pipe.predict(X_test)

            # Metrics
            mse = mean_squared_error(y_test, preds)
            r2 = r2_score(y_test, preds)

            # Log metrics
            mlflow.log_metric("MSE", mse)
            mlflow.log_metric("R2", r2)

            # Log parameters
            if hasattr(pipe.named_steps["model"], "get_params"):
                mlflow.log_params(pipe.named_steps["model"].get_params())

            # Log model
            if name == "XGBoost":
                mlflow.xgboost.log_model(pipe.named_steps["model"], artifact_path="model")
            else:
                mlflow.sklearn.log_model(pipe, artifact_path="model")

            print(f"\n{name} Results:")
            print(f"  MSE: {mse:.2f}")
            print(f"  R²: {r2:.2f}")


if __name__ == "__main__":
    # ✅ Change this to your actual dataset path + target column
    csv_path = "46d79113-5f1b-40ed-a7dc-a289b29e996c.csv"
    target_col = "target"  # <-- change this to match your dataset

    with mlflow.start_run(run_name="Full_Regression_Pipelines"):
        regression_pipelines(csv_path, target_col)

    print("\n✅ All regression runs logged to MLflow experiment:", EXPERIMENT_NAME)
